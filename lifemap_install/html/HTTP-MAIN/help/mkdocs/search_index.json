{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Lifemap-server\n\n\nThis document explains you how to use Lifemap-server for visualizing your own (huge) trees (up to many million species) that resemble the Lifemap Tree(s) of Life presented \nhere\n or \nhere\n.\n\n\nVisualizing your own tree is as simple as launching a virtual machine (double-click) and copy-pasting or uploading your own tree file on a web page. \nFollow \nthis link\n to get started. \n\n\nAnother option (for more advanced programmers) consists in \nsetting up your own Lifemap-server\n on your own machine or server. This option is useful if you want to modify some of the code on which Lifemap relies and/or if you want one of your trees to be available to others on the internet.\n\n(however that for this last possibility, using the virtual machine and modifying it may be easier)", 
            "title": "home"
        }, 
        {
            "location": "/#welcome-to-lifemap-server", 
            "text": "This document explains you how to use Lifemap-server for visualizing your own (huge) trees (up to many million species) that resemble the Lifemap Tree(s) of Life presented  here  or  here .  Visualizing your own tree is as simple as launching a virtual machine (double-click) and copy-pasting or uploading your own tree file on a web page.  Follow  this link  to get started.   Another option (for more advanced programmers) consists in  setting up your own Lifemap-server  on your own machine or server. This option is useful if you want to modify some of the code on which Lifemap relies and/or if you want one of your trees to be available to others on the internet. (however that for this last possibility, using the virtual machine and modifying it may be easier)", 
            "title": "Welcome to Lifemap-server"
        }, 
        {
            "location": "/virtualmachine/", 
            "text": "Installing and using Lifemap Virtual Machine\n\n\nUsing Lifemap Virtual Machine is very easy. Follow the instructions given here: \n\n\n1. Download Lifemap-server Virtual Machine\n\n\nGo to \nhttp://lifemap.univ-lyon1.fr/download.html\n and download the file. Warning, this file is big (3.6Go). It contains the whole virtual machine (ova format).\n\n\n2. Install Virtualbox\n\n\nVirtualBox is an opensource virtualization tool that can open and run virtual machines. Go to \nhttps://www.virtualbox.org/\n and follow the instructions to downaload and install Virtualbox.\n\n\nNote: if you already have a virtualization tool installed (Virtualbox, VMware, etc.) there is no need to install a new one. Just use it.\n\n\n3. Start Lifemap-server Virtual Machine with the virtualization tool\n\n\nStart VirualBox.\n\n\nGo to \nFile-\nImport Virtual Disk\n.\n\n\nFollow the instructions to import the ova file you just downloaded.\n\n\nOnce everything is done, just click on the virtual machine and click \nStart\n. This will start Lifemap-server. \n\n\n4. Use Lifemap-server\n\n\nOpen your browser, and type \nlocalhost:5580\n. You should see a page that looks like this one:\n\n\n\n\nSimply follow the instructions to view your tree.\n\n\n5. Additional information\n\n\n\n\nYou need to empty the cache of your browser every time you uplaod a new tree to the server. If you don't, you may be exploring a tree that is not the last one uploaded. \n\n\nLifemap-server is configured to view trees with a maximum of 42 zoom levels (in Google maps, you use 18 zoom levels!).\n\n\nFor very large trees (million tips), Lifemap-server can be slow if you keep the default configuration of the virtual machine. Depending on the ressources you have on your machine that hosts the virtualmachine, you may want to increase the memory that is allowed to the VM and the number of CPUs that it can  use. By default the VM uses 2 CPUs and 2G of RAM.", 
            "title": "Use Lifemap-server virtual machine (easy)"
        }, 
        {
            "location": "/virtualmachine/#installing-and-using-lifemap-virtual-machine", 
            "text": "Using Lifemap Virtual Machine is very easy. Follow the instructions given here:", 
            "title": "Installing and using Lifemap Virtual Machine"
        }, 
        {
            "location": "/virtualmachine/#1-download-lifemap-server-virtual-machine", 
            "text": "Go to  http://lifemap.univ-lyon1.fr/download.html  and download the file. Warning, this file is big (3.6Go). It contains the whole virtual machine (ova format).", 
            "title": "1. Download Lifemap-server Virtual Machine"
        }, 
        {
            "location": "/virtualmachine/#2-install-virtualbox", 
            "text": "VirtualBox is an opensource virtualization tool that can open and run virtual machines. Go to  https://www.virtualbox.org/  and follow the instructions to downaload and install Virtualbox.  Note: if you already have a virtualization tool installed (Virtualbox, VMware, etc.) there is no need to install a new one. Just use it.", 
            "title": "2. Install Virtualbox"
        }, 
        {
            "location": "/virtualmachine/#3-start-lifemap-server-virtual-machine-with-the-virtualization-tool", 
            "text": "Start VirualBox.  Go to  File- Import Virtual Disk .  Follow the instructions to import the ova file you just downloaded.  Once everything is done, just click on the virtual machine and click  Start . This will start Lifemap-server.", 
            "title": "3. Start Lifemap-server Virtual Machine with the virtualization tool"
        }, 
        {
            "location": "/virtualmachine/#4-use-lifemap-server", 
            "text": "Open your browser, and type  localhost:5580 . You should see a page that looks like this one:   Simply follow the instructions to view your tree.", 
            "title": "4. Use Lifemap-server"
        }, 
        {
            "location": "/virtualmachine/#5-additional-information", 
            "text": "You need to empty the cache of your browser every time you uplaod a new tree to the server. If you don't, you may be exploring a tree that is not the last one uploaded.   Lifemap-server is configured to view trees with a maximum of 42 zoom levels (in Google maps, you use 18 zoom levels!).  For very large trees (million tips), Lifemap-server can be slow if you keep the default configuration of the virtual machine. Depending on the ressources you have on your machine that hosts the virtualmachine, you may want to increase the memory that is allowed to the VM and the number of CPUs that it can  use. By default the VM uses 2 CPUs and 2G of RAM.", 
            "title": "5. Additional information"
        }, 
        {
            "location": "/setup/", 
            "text": "Set up you own server on Ubuntu 16.04\n\n\n\n\nThis configuration instructions were largely copied from the OpenStreetMap wiki page \nhttp://wiki.openstreetmap.org/wiki/User:SomeoneElse/Ubuntu_1604_tileserver_load\n.\n\n\nThese instructions were tested on Ubuntu-16.04-server (LTS)\n\n\n\n\nUpdate and upgrade Ubuntu\n\n\nMake sure to update and upgrade all your packages: \n\n\nsudo apt-get update\nsudo apt-get upgrade\n\n\n\n\nNote\n:\n \nit might be necessary to restart after this upgrade.\n\n\ninstall basic softwares and dependencies\n\n\nInstall first this series of packages\n\n\nsudo apt install libboost-all-dev git-core tar unzip wget bzip2 build-essential autoconf libtool libxml2-dev libgeos-dev libgeos++-dev libpq-dev libbz2-dev libproj-dev munin-node munin libprotobuf-c0-dev protobuf-c-compiler libfreetype6-dev libpng12-dev libtiff5-dev libicu-dev libgdal-dev libcairo-dev libcairomm-1.0-dev apache2 apache2-dev libagg-dev liblua5.2-dev ttf-unifont lua5.1 liblua5.1-dev libgeotiff-epsg node-carto\n\n\n\n\nfollowed by these ones\n\n\nsudo apt-get install postgresql postgresql-contrib postgis postgresql-9.5-postgis-2.2\n\n\n\n\nCreate and configure a Postgresql/Postgis database\n\n\nWe create a user called \nlm\n protected by a password (\n0000\n), and finally a postgresql database named \ntree\n for which we enable PostGis. You can change the username, password or database name, but if so, you will have to change a configuration file on which the tile machinery (mod_tile and renderd) relies. \n\n\nConnect as a 'postgres' user and create user lm.\n\n\nsudo -u postgres -i\ncreateuser lm -P\n\n\n\n\nThe  \n-P\n option tells Postgres to ask interactively for the password you want. You need to enter \n0000\n if you don't want to change the configuration files. \n\n\nThen create the database, with owner \nlm\n. \n\n\ncreatedb -E UTF8 -O lm tree\n\n\n\n\nWhile still working as the 'postgres' user, type\n\n\npsql   # (will give a postgres=# prompt) \n\\c tree  # (to connnect to database tree as superuser\n\n\n\n\n\nNow install the postgis extension:\n\n\nCREATE EXTENSION postgis;  \nALTER TABLE geometry_columns OWNER TO lm;\nALTER TABLE spatial_ref_sys OWNER TO lm; \n\n\n\n\nThen exit with \n\\q\n to exit psql followed by \nexit\n to come back to normal user.\n\n\nInstall Mapnik\n\n\nMapnik is responsible for creating all the images (tiles), using as data sources the data present in the database we just created. To install mapnik do:\n\n\nsudo apt-get install gdal-bin libgdal1-dev libmapnik-dev mapnik-utils python-mapnik\n\n\n\n\n\nInstall mod_tile and renderd\n\n\n\"mod_tile\" is an Apache module that handles requests for tiles; \"renderd\" is a daemon that actually renders tiles when \"mod_tile\" requests. for increasing the number of zoom levels that can be used, mod_tile has to be modified, using the files present in the Lifemap GitHub. This is explained later with the installation\n\n\nFor convenience, We chose as starting \"mod_tile\" the one forked by \"SomeoneElseOSM\" and available on github.\n\n\nCreate an \nsrc\n folder if it does not exist:\n\n\ncd\nmkdir src\n\n\n\n\nDownloald mod_tile\n\n\ncd ~/src\ngit clone git://github.com/SomeoneElseOSM/mod_tile.git\ncd mod_tile\n\n\n\n\nDownload Lifemap files\n\n\ncd ~/src\ngit clone https://github.com/damiendevienne/Lifemap.git\n\n\n\n\nWe then replace \nincludes/\n and \nsrc/\n folders in mod_tile by those present in \nLifemap/OTHER/mod_tile\n\n\ncp -r ~/src/Lifemap/OTHER/mod_tile/includes ~/src/Lifemap/OTHER/mod_tile/src ~/src/mod_tile/\n\n\n\n\nWe can then compile mod_tile.\n\n\ncd ~/src/mod_tile\n./autogen.sh\n./configure\nmake\nsudo make install\nsudo make install-mod_tile\nsudo ldconfig\n\n\n\n\nConfiguring Apache\n\n\nManually create the directory for generated tiles:\n\n\nsudo mkdir /var/lib/mod_tile\nsudo mkdir /var/run/renderd\n\n\n\n\nTo tell Apache to load the mod_tile module, edit the following file with vi (or nano, emacs, gedit...). The file may not exist. You will thus have to create it.\n\n\nsudo vi /etc/apache2/conf-available/mod_tile.conf\n\n\n\n\nAnd add the following line :\n\n\nLoadModule tile_module /usr/lib/apache2/modules/mod_tile.so\n``\n\nThen type\n\n```sh\nsudo a2enconf mod_tile\n\n\n\n\nNow let's configure 'renderd'. open the following file with vi (or other editor)\n\n\nsudo vi /etc/apache2/sites-available/000-default.conf\n\n\n\n\nadd the following lines between the \"ServerAdmin\" and \"DocumentRoot\" lines:\n\n\nLoadTileConfigFile /etc/renderd.conf\nModTileRenderdSocketName /var/run/renderd/renderd.sock\n# Timeout before giving up for a tile to be rendered\nModTileRequestTimeout 0\n# Timeout before giving up for a tile to be rendered that is otherwise missing\nModTileMissingRequestTimeout 30\n\n\n\n\nThen reload apache\n\n\nsudo service apache2 restart\n\n\n\n\n[OPTIONAL]: Configure apache for running php and python scripts\n\n\nThis is necessary if you plan to have a web page that helps loading and launching your tree (as in the Virtualmachine proposed \nhere\n).\n\n\nEnable CGI processing in apache\n\n\nsudo a2enmod cgi\n\n\n\n\nCreate a folder on which tu put your python files\n\n\nsudo mkdir /var/www/html/bin\n\n\n\n\nAnd tell apache that this folder will contain scripts that you want to execute. Open the file:\n\n\nsudo vi /etc/apache2/sites-available/000-default.conf\n\n\n\n\nand add the following lines before \n/VirtualHost\n:\n\n\nDirectory /var/www/html/bin\n\n        Options +ExecCGI\n        AddHandler cgi-script .py\n\n/Directory\n\n\n\n\n\nFinally, if you want to be able to upload tree files larger than 8MB you need to change the defult php settings by editing the \nphp.ini\n file, usually located in \n/etc/php/7.0/apache2/php.ini\n. \n\n\nlocate the line where it is written \npost_max_size\n and change the value to 200M. Make sure the \nfile_upload\n is set to \nOn\n. Finally set the value for \"upload_max_filesize\nto\n200M`.   \n\n\nThen reload apache\n\n\nsudo service apache2 restart\n\n\n\n\nConfiguring python\n\n\nFor traversing the tree and populating the PostgreSQL/PostGIS database, you will need some python modules to be installed. \nInstall first some required dependencies: \n\n\nsudo apt-get install python-numpy python-qt4 python-lxml python-six pip\n\n\n\n\nInstall the \npsycopg2\n module that allow connection with the Postgresql database:\n\n\npip install --upgrade psycopg2 \n\n\n\n\nYou can then install the \nete3\n module for phylogenetic trees handling, making sure to set a correct target.   \n\n\nsudo pip install --upgrade --target=/usr/local/lib/python2.7/dist-packages ete3\n\n\n\n\nTo get the correct address of the target, look at where \npsycopg2\n module was installed (with \npip show psycopg2\n). Note that if you don't specify this --target, the module will be \n\n\nConfiguring Solr\n\n\nSolr is an Apache module that allows very fast searching. It is used in Lifemap for finding the species and node names in the explorer page. \nTo set up Solr, go to http://lucene.apache.org/solr/ and download the latest .tar.gz solr version, and save it in your home directory under the \nsrc\n folder:\n\n\ncd ~/src\nwget http://apache.trisect.eu/lucene/solr/6.2.1/solr-6.2.1.tgz\n\n\n\n\nUntar the file:  \n\n\ntar xvzf solr-6.2.1.tgz\n\n\n\n\nCheck that java is installed by typing\n\n\njava --version\n\n\n\n\nIf not, install it: \n\n\n\nsudo apt-get update\nsudo apt-get install default-jre\nsudo apt-get install default-jdk\n\n\n\n\nNow, still within the solr directory, we will start solr and create a new Core called taxo. It will contain all the information for the tree: coordinates of nodes and tips, associated names, zoom level at which they are visible, number of descendants, etc... \nStart solr:\n\n\nbin/solr start\n\n\n\n\nWhen started, create the new core:\n\n\nbin/solr create -c taxo\n\n\n\n\nThis will create a new folder named \ntaxo\n in \nserver/solr/\n. \nYou will then have to change some configuration files in this new core. \n\n\ncd ~/src/solr-6.2.1/server/solr/taxo/conf\n\n\n\n\nand replace the schema.xml by the \ncontent\n of schema.taxo.xml present on Lifemap's GitHub (in \nLifemap/OTHER/solr-config/\n), and solrconfig.xml by the \ncontent\n of solrconfig.taxo.xml. The original names of the files in Solr should be unchanged. Reload solr when you are done: \n\n\n~/src/solr-6.2.1/bin/solr restart\n\n\n\n\nYou are done!\n\n\nThe Mapnik stylesheet\n\n\nThe stylesheet for Mapnik is an xml file (or list of files) that specifies all the graphical aspects that allow mapnik to transform the database into images: what color, what font, what style for what object at each possible zoom level.\nThe current stylesheets (currently used on the main Lifemap maps online) are available in the Lifemap github that you downloaded earlier. It is thus present in\n\n\n~/src/Lifemap/OTHER/style/\n\n\n\n\nte file \nosm.xml\n (the main stylesheet) refers to many other files that are within the \ninc\n folder. One of these files,\n~/src/Lifemap/OTHER/style/inc/datasource-settings.xml.inc\n contains the information for Mapnik to connect to the database.\n\n\nIf you followed all the instructions above for the installation, you should have the following settings. If you changed some of these information (username, password, databse name, etc.), change accordingly.\n\n\n...\n\nParameter name=\ntype\npostgis\n/Parameter\n\n\nParameter name=\npassword\n0000\n/Parameter\n\n\nParameter name=\nhost\nlocalhost\n/Parameter\n\n\nParameter name=\nport\n/Parameter\n\n\nParameter name=\nuser\nlm\n/Parameter\n\n\nParameter name=\ndbname\ntree\n/Parameter\n\n...\n\n\n\n\nThe 'renderd' configuration file\n\n\nThis file tells 'renderd' where to find mapnik, where to find the stylesheet and where to write the images generated by mapnik. Edit this file by typing\n\n\nsudo vi /etc/renderd.conf\n\n\n\n\nand modify it to make it look like the following. You can change the number of threads used, the location of the stylesheet, etc. if necessary.\n\n\n[renderd]\nnum_threads=8\ntile_dir=/var/lib/mod_tile\nstats_file=/var/run/renderd/renderd.stats\n\n[mapnik]\nplugins_dir=/usr/lib/mapnik/3.0/input\nfont_dir=/usr/share/fonts/truetype\nfont_dir_recurse=1\n\n[default]\nURI=/osm_tiles/\nTILEDIR=/var/lib/mod_tile\nXML=/home/lm/src/Lifemap/OTHER/style/osm.xml\nHOST=localhost\nTILESIZE=256\nMINZOOM=0\nMAXZOOM=40\n\n\n\n\n\nTest that everything works\n\n\nIf everything went well you should be able to run the 'renderd' daemon by typing\n\n\n    sudo ~/src/mod_tile/renderd -f\n\n\n\n\nthe \n-f\n option is for running renderd in foreground mode to see what happens.\n\n\nIf all the installation went well and your database is empty (as it should at this stage), you will see some small errors concerning sql executeQuery failures (because the database is empty) but you SHOULD NOT get the ubuntu header back (lm@ubuntu:~$). This means that the daemon is runnning ok and is waiting for instructions from mod_tile.\n\n\nPopulate the database with your tree\n\n\nExplore the tree from the web navigator", 
            "title": "Set-up your own Lifemap-server (advanced)'"
        }, 
        {
            "location": "/setup/#set-up-you-own-server-on-ubuntu-1604", 
            "text": "This configuration instructions were largely copied from the OpenStreetMap wiki page  http://wiki.openstreetmap.org/wiki/User:SomeoneElse/Ubuntu_1604_tileserver_load .  These instructions were tested on Ubuntu-16.04-server (LTS)", 
            "title": "Set up you own server on Ubuntu 16.04"
        }, 
        {
            "location": "/setup/#update-and-upgrade-ubuntu", 
            "text": "Make sure to update and upgrade all your packages:   sudo apt-get update\nsudo apt-get upgrade  Note :   it might be necessary to restart after this upgrade.", 
            "title": "Update and upgrade Ubuntu"
        }, 
        {
            "location": "/setup/#install-basic-softwares-and-dependencies", 
            "text": "Install first this series of packages  sudo apt install libboost-all-dev git-core tar unzip wget bzip2 build-essential autoconf libtool libxml2-dev libgeos-dev libgeos++-dev libpq-dev libbz2-dev libproj-dev munin-node munin libprotobuf-c0-dev protobuf-c-compiler libfreetype6-dev libpng12-dev libtiff5-dev libicu-dev libgdal-dev libcairo-dev libcairomm-1.0-dev apache2 apache2-dev libagg-dev liblua5.2-dev ttf-unifont lua5.1 liblua5.1-dev libgeotiff-epsg node-carto  followed by these ones  sudo apt-get install postgresql postgresql-contrib postgis postgresql-9.5-postgis-2.2", 
            "title": "install basic softwares and dependencies"
        }, 
        {
            "location": "/setup/#create-and-configure-a-postgresqlpostgis-database", 
            "text": "We create a user called  lm  protected by a password ( 0000 ), and finally a postgresql database named  tree  for which we enable PostGis. You can change the username, password or database name, but if so, you will have to change a configuration file on which the tile machinery (mod_tile and renderd) relies.   Connect as a 'postgres' user and create user lm.  sudo -u postgres -i\ncreateuser lm -P  The   -P  option tells Postgres to ask interactively for the password you want. You need to enter  0000  if you don't want to change the configuration files.   Then create the database, with owner  lm .   createdb -E UTF8 -O lm tree  While still working as the 'postgres' user, type  psql   # (will give a postgres=# prompt) \n\\c tree  # (to connnect to database tree as superuser  Now install the postgis extension:  CREATE EXTENSION postgis;  \nALTER TABLE geometry_columns OWNER TO lm;\nALTER TABLE spatial_ref_sys OWNER TO lm;   Then exit with  \\q  to exit psql followed by  exit  to come back to normal user.", 
            "title": "Create and configure a Postgresql/Postgis database"
        }, 
        {
            "location": "/setup/#install-mapnik", 
            "text": "Mapnik is responsible for creating all the images (tiles), using as data sources the data present in the database we just created. To install mapnik do:  sudo apt-get install gdal-bin libgdal1-dev libmapnik-dev mapnik-utils python-mapnik", 
            "title": "Install Mapnik"
        }, 
        {
            "location": "/setup/#install-mod_tile-and-renderd", 
            "text": "\"mod_tile\" is an Apache module that handles requests for tiles; \"renderd\" is a daemon that actually renders tiles when \"mod_tile\" requests. for increasing the number of zoom levels that can be used, mod_tile has to be modified, using the files present in the Lifemap GitHub. This is explained later with the installation  For convenience, We chose as starting \"mod_tile\" the one forked by \"SomeoneElseOSM\" and available on github.  Create an  src  folder if it does not exist:  cd\nmkdir src  Downloald mod_tile  cd ~/src\ngit clone git://github.com/SomeoneElseOSM/mod_tile.git\ncd mod_tile  Download Lifemap files  cd ~/src\ngit clone https://github.com/damiendevienne/Lifemap.git  We then replace  includes/  and  src/  folders in mod_tile by those present in  Lifemap/OTHER/mod_tile  cp -r ~/src/Lifemap/OTHER/mod_tile/includes ~/src/Lifemap/OTHER/mod_tile/src ~/src/mod_tile/  We can then compile mod_tile.  cd ~/src/mod_tile\n./autogen.sh\n./configure\nmake\nsudo make install\nsudo make install-mod_tile\nsudo ldconfig", 
            "title": "Install mod_tile and renderd"
        }, 
        {
            "location": "/setup/#configuring-apache", 
            "text": "Manually create the directory for generated tiles:  sudo mkdir /var/lib/mod_tile\nsudo mkdir /var/run/renderd  To tell Apache to load the mod_tile module, edit the following file with vi (or nano, emacs, gedit...). The file may not exist. You will thus have to create it.  sudo vi /etc/apache2/conf-available/mod_tile.conf  And add the following line :  LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so\n``\n\nThen type\n\n```sh\nsudo a2enconf mod_tile  Now let's configure 'renderd'. open the following file with vi (or other editor)  sudo vi /etc/apache2/sites-available/000-default.conf  add the following lines between the \"ServerAdmin\" and \"DocumentRoot\" lines:  LoadTileConfigFile /etc/renderd.conf\nModTileRenderdSocketName /var/run/renderd/renderd.sock\n# Timeout before giving up for a tile to be rendered\nModTileRequestTimeout 0\n# Timeout before giving up for a tile to be rendered that is otherwise missing\nModTileMissingRequestTimeout 30  Then reload apache  sudo service apache2 restart", 
            "title": "Configuring Apache"
        }, 
        {
            "location": "/setup/#optional-configure-apache-for-running-php-and-python-scripts", 
            "text": "This is necessary if you plan to have a web page that helps loading and launching your tree (as in the Virtualmachine proposed  here ).  Enable CGI processing in apache  sudo a2enmod cgi  Create a folder on which tu put your python files  sudo mkdir /var/www/html/bin  And tell apache that this folder will contain scripts that you want to execute. Open the file:  sudo vi /etc/apache2/sites-available/000-default.conf  and add the following lines before  /VirtualHost :  Directory /var/www/html/bin \n        Options +ExecCGI\n        AddHandler cgi-script .py /Directory   Finally, if you want to be able to upload tree files larger than 8MB you need to change the defult php settings by editing the  php.ini  file, usually located in  /etc/php/7.0/apache2/php.ini .   locate the line where it is written  post_max_size  and change the value to 200M. Make sure the  file_upload  is set to  On . Finally set the value for \"upload_max_filesize to 200M`.     Then reload apache  sudo service apache2 restart", 
            "title": "[OPTIONAL]: Configure apache for running php and python scripts"
        }, 
        {
            "location": "/setup/#configuring-python", 
            "text": "For traversing the tree and populating the PostgreSQL/PostGIS database, you will need some python modules to be installed. \nInstall first some required dependencies:   sudo apt-get install python-numpy python-qt4 python-lxml python-six pip  Install the  psycopg2  module that allow connection with the Postgresql database:  pip install --upgrade psycopg2   You can then install the  ete3  module for phylogenetic trees handling, making sure to set a correct target.     sudo pip install --upgrade --target=/usr/local/lib/python2.7/dist-packages ete3  To get the correct address of the target, look at where  psycopg2  module was installed (with  pip show psycopg2 ). Note that if you don't specify this --target, the module will be", 
            "title": "Configuring python"
        }, 
        {
            "location": "/setup/#configuring-solr", 
            "text": "Solr is an Apache module that allows very fast searching. It is used in Lifemap for finding the species and node names in the explorer page. \nTo set up Solr, go to http://lucene.apache.org/solr/ and download the latest .tar.gz solr version, and save it in your home directory under the  src  folder:  cd ~/src\nwget http://apache.trisect.eu/lucene/solr/6.2.1/solr-6.2.1.tgz  Untar the file:    tar xvzf solr-6.2.1.tgz  Check that java is installed by typing  java --version  If not, install it:   \nsudo apt-get update\nsudo apt-get install default-jre\nsudo apt-get install default-jdk  Now, still within the solr directory, we will start solr and create a new Core called taxo. It will contain all the information for the tree: coordinates of nodes and tips, associated names, zoom level at which they are visible, number of descendants, etc... \nStart solr:  bin/solr start  When started, create the new core:  bin/solr create -c taxo  This will create a new folder named  taxo  in  server/solr/ . \nYou will then have to change some configuration files in this new core.   cd ~/src/solr-6.2.1/server/solr/taxo/conf  and replace the schema.xml by the  content  of schema.taxo.xml present on Lifemap's GitHub (in  Lifemap/OTHER/solr-config/ ), and solrconfig.xml by the  content  of solrconfig.taxo.xml. The original names of the files in Solr should be unchanged. Reload solr when you are done:   ~/src/solr-6.2.1/bin/solr restart  You are done!", 
            "title": "Configuring Solr"
        }, 
        {
            "location": "/setup/#the-mapnik-stylesheet", 
            "text": "The stylesheet for Mapnik is an xml file (or list of files) that specifies all the graphical aspects that allow mapnik to transform the database into images: what color, what font, what style for what object at each possible zoom level.\nThe current stylesheets (currently used on the main Lifemap maps online) are available in the Lifemap github that you downloaded earlier. It is thus present in  ~/src/Lifemap/OTHER/style/  te file  osm.xml  (the main stylesheet) refers to many other files that are within the  inc  folder. One of these files, ~/src/Lifemap/OTHER/style/inc/datasource-settings.xml.inc  contains the information for Mapnik to connect to the database.  If you followed all the instructions above for the installation, you should have the following settings. If you changed some of these information (username, password, databse name, etc.), change accordingly.  ... Parameter name= type postgis /Parameter  Parameter name= password 0000 /Parameter  Parameter name= host localhost /Parameter  Parameter name= port /Parameter  Parameter name= user lm /Parameter  Parameter name= dbname tree /Parameter \n...", 
            "title": "The Mapnik stylesheet"
        }, 
        {
            "location": "/setup/#the-renderd-configuration-file", 
            "text": "This file tells 'renderd' where to find mapnik, where to find the stylesheet and where to write the images generated by mapnik. Edit this file by typing  sudo vi /etc/renderd.conf  and modify it to make it look like the following. You can change the number of threads used, the location of the stylesheet, etc. if necessary.  [renderd]\nnum_threads=8\ntile_dir=/var/lib/mod_tile\nstats_file=/var/run/renderd/renderd.stats\n\n[mapnik]\nplugins_dir=/usr/lib/mapnik/3.0/input\nfont_dir=/usr/share/fonts/truetype\nfont_dir_recurse=1\n\n[default]\nURI=/osm_tiles/\nTILEDIR=/var/lib/mod_tile\nXML=/home/lm/src/Lifemap/OTHER/style/osm.xml\nHOST=localhost\nTILESIZE=256\nMINZOOM=0\nMAXZOOM=40", 
            "title": "The 'renderd' configuration file"
        }, 
        {
            "location": "/setup/#test-that-everything-works", 
            "text": "If everything went well you should be able to run the 'renderd' daemon by typing      sudo ~/src/mod_tile/renderd -f  the  -f  option is for running renderd in foreground mode to see what happens.  If all the installation went well and your database is empty (as it should at this stage), you will see some small errors concerning sql executeQuery failures (because the database is empty) but you SHOULD NOT get the ubuntu header back (lm@ubuntu:~$). This means that the daemon is runnning ok and is waiting for instructions from mod_tile.", 
            "title": "Test that everything works"
        }, 
        {
            "location": "/setup/#populate-the-database-with-your-tree", 
            "text": "", 
            "title": "Populate the database with your tree"
        }, 
        {
            "location": "/setup/#explore-the-tree-from-the-web-navigator", 
            "text": "", 
            "title": "Explore the tree from the web navigator"
        }
    ]
}